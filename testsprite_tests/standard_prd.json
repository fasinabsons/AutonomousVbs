{
  "meta": {
    "project": "MoonFlower WiFi Automation System",
    "date": "2025-07-30",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "The MoonFlower WiFi Automation System is a robust, fully autonomous solution for 365-day scheduled extraction, processing, and reporting of WiFi user data from Ruckus Wireless Controllers. It integrates Selenium-based web automation, OpenCV template matching for VBS software control, Excel processing, PDF report generation, and multi-channel email delivery into a seamless workflow, supported by Windows service and task scheduler integration.",
  "core_goals": [
    "Automate daily CSV downloads from Ruckus Wireless Controllers with automatic login, navigation, and file retrieval.",
    "Process and merge extracted CSV files into VBS-compatible Excel format with header mapping and deduplication.",
    "Control the VBS ERP software via OpenCV and PyAutoGUI for automated login, navigation, data upload, and PDF report generation.",
    "Generate and save daily PDF reports summarizing WiFi usage statistics.",
    "Deliver reports and notifications via email with configurable scheduling and recipient lists.",
    "Provide zero user intervention with automatic recovery, error handling, retries, and self-restoration.",
    "Support continuous 365-day operation with Windows service integration and automated PC restarts.",
    "Enable workflow orchestration via modular BAT files and scheduling with Windows Task Scheduler.",
    "Offer a GUI configuration panel for email preferences, debugging, and service control."
  ],
  "key_features": [
    "Selenium-based automated web login and CSV file download with iframe handling, retry logic, and browser recovery.",
    "OpenCV-based image recognition and template matching to automate VBS ERP software phases: login, navigation, data upload, and PDF report generation.",
    "Excel data processing with pandas and xlwt to convert multiple CSV files into deduplicated, header-mapped Excel (.xls) files.",
    "Dual email delivery system sending personal notifications via Gmail and professional reports via Outlook with PDF attachments.",
    "Modular BAT file orchestration to run system tasks sequentially or individually with integrated PC lock/unlock management.",
    "Windows Service for autonomous, continuous background operation with startup integration and health monitoring.",
    "Scheduled nightly PC restarts with notification emails and auto-resume of automation workflows.",
    "Frontend configuration panel built with Tkinter for managing email settings, debugging, log viewing, and service control."
  ],
  "user_flow_summary": [
    "User or system triggers the daily workflow via Windows Task Scheduler or the Master Orchestrator service.",
    "System executes Selenium automation to log into the Ruckus Controller, navigate through network interfaces, and download 8 CSV files across two scheduled time slots daily.",
    "Following successful downloads, CSV files are discovered and processed into a single deduplicated Excel file compatible with the VBS ERP application.",
    "VBS automation phases are executed sequentially: enhanced login by tab cycling and window focusing, image-based navigation through menus, Excel data upload with multi-variant button detection, and PDF report generation via intelligent OpenCV-guided UI interactions.",
    "Generated PDF reports are saved with date-based folder organization and verified for completeness.",
    "Email delivery system sends daily automated report emails and task completion notifications based on configurable schedule rules including weekend and holiday overrides.",
    "Modular BAT files allow manual or scheduled execution of individual steps or the full automation sequence.",
    "Windows Service ensures autonomous continuous operation with error alerting and automatic retry on failure.",
    "Users access the configuration GUI to modify email preferences, enable debug mode, and restart the automation service as needed."
  ],
  "validation_criteria": [
    "Successful authentication and login to Ruckus Controller with iframe and credential validation.",
    "All scheduled CSV files (8 per day) downloaded correctly into designated folders with timestamp verification.",
    "CSV files must be processed to Excel with correct header mappings, no duplicates, and output in .xls format.",
    "VBS automation must complete all four phases with success indicators: login verified, navigation completed, data upload acknowledged, PDF report generated and saved.",
    "PDF reports verified to exist in expected location with correct filenames matching date conventions.",
    "Emails successfully sent to intended recipients with attachments and correct message contents, respecting weekend and holiday settings.",
    "BAT file executions complete with exit code 0 and proper window management and retries on failures.",
    "Windows Service runs continuously without crash or hang, reporting uptime and next scheduled execution.",
    "System recovers autonomously from errors by retrying tasks and sends error alerts on failures requiring manual intervention.",
    "PC restarts occur automatically at scheduled time with notification emails sent prior to restart.",
    "Configuration GUI saves and loads settings correctly, allowing changes to email lists, debug mode, and triggers service restarts successfully."
  ],
  "code_summary": {
    "tech_stack": [
      "Python 3.11+",
      "OpenCV 4.8.1.78",
      "PyAutoGUI 0.9.54",
      "Selenium 4.15.2",
      "Windows Batch Scripts",
      "Windows Task Scheduler",
      "Windows Services (pywin32)",
      "Pandas 2.1.4",
      "XLWt 1.3.0",
      "Chrome WebDriver",
      "Image Recognition/Template Matching",
      "Audio Detection (PyAudio)",
      "OCR (Tesseract)",
      "SMTP Email (Gmail/Outlook)"
    ],
    "features": [
      {
        "name": "CSV_Download_Automation",
        "description": "Selenium-based web automation to download CSV files from Ruckus Wireless Controller at scheduled times with 10 retry attempts and browser recovery",
        "files": [
          "wifi/csv_downloader_resilient.py",
          "wifi/csv_downloader_simple.py",
          "wifi/csv_downloader_cli.py",
          "wifi/element_detector.py",
          "wifi/error_recovery.py",
          "wifi/timing_manager.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "CSV Download API",
            "version": "1.0.0"
          },
          "paths": {
            "/download_csv": {
              "post": {
                "summary": "Download CSV files from Ruckus Controller",
                "parameters": [
                  {
                    "name": "target_url",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Ruckus controller URL (https://51.38.163.73:8443/wsg/)"
                  },
                  {
                    "name": "credentials",
                    "schema": {
                      "type": "object"
                    },
                    "description": "Login credentials (username: admin, password: AdminFlower@123)"
                  },
                  {
                    "name": "retry_attempts",
                    "schema": {
                      "type": "integer"
                    },
                    "description": "Number of retry attempts (default: 10)"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "CSV files downloaded successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "files_downloaded": {
                              "type": "integer"
                            },
                            "output_folder": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "VBS_OpenCV_Automation",
        "description": "OpenCV-based template matching automation for VBS application with 4 phases: login, navigation, data upload, and PDF report generation using image recognition",
        "files": [
          "vbs/vbs_phase1_login.py",
          "vbs/vbs_phase2_navigation_fixed.py",
          "vbs/vbs_phase3_upload_fixed.py",
          "vbs/vbs_phase3_upload_calibrated.py",
          "vbs/vbs_phase4_report_fixed.py",
          "vbs/cv_services/template_service.py",
          "vbs/cv_services/ocr_service.py",
          "vbs/templates/"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "VBS Automation API",
            "version": "1.0.0"
          },
          "paths": {
            "/vbs/phase1/login": {
              "post": {
                "summary": "VBS Phase 1 - Enhanced login with tab cycling",
                "parameters": [
                  {
                    "name": "credentials",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "company": {
                          "type": "string",
                          "default": "IT"
                        },
                        "financial_year": {
                          "type": "string",
                          "default": "01/01/2023"
                        },
                        "username": {
                          "type": "string",
                          "default": "vj"
                        }
                      }
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Login successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "window_handle": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/vbs/phase3/upload": {
              "post": {
                "summary": "VBS Phase 3 - Excel import and update with multi-variant button detection",
                "parameters": [
                  {
                    "name": "excel_file_path",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Path to Excel file for import"
                  },
                  {
                    "name": "update_button_variants",
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [
                        "09_update_button_variant2.png",
                        "09_update_button_variant1.png",
                        "09_update_button.png"
                      ]
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Upload completed successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "phase": {
                              "type": "string"
                            },
                            "upload_completed": {
                              "type": "boolean"
                            },
                            "button_variant_used": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Excel_Data_Processing",
        "description": "CSV to Excel conversion with header mapping and deduplication for VBS compatibility (.xls format)",
        "files": [
          "excel/excel_generator.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Excel Processing API",
            "version": "1.0.0"
          },
          "paths": {
            "/excel/generate": {
              "post": {
                "summary": "Convert CSV files to VBS-compatible Excel format",
                "parameters": [
                  {
                    "name": "csv_folder",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Folder containing CSV files to process"
                  },
                  {
                    "name": "output_format",
                    "schema": {
                      "type": "string",
                      "default": ".xls"
                    },
                    "description": "Excel output format for VBS compatibility"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Excel file generated successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "excel_file": {
                              "type": "string"
                            },
                            "rows_processed": {
                              "type": "integer"
                            },
                            "duplicates_removed": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Email_Delivery_System",
        "description": "Dual email system with personal notifications (Gmail) and professional GM reports (Outlook) with PDF attachments",
        "files": [
          "email/email_delivery.py",
          "email/outlook_automation.py",
          "email/enhanced_email_reporting.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Email Delivery API",
            "version": "1.0.0"
          },
          "paths": {
            "/email/personal_notification": {
              "post": {
                "summary": "Send personal milestone notifications via Gmail",
                "parameters": [
                  {
                    "name": "notification_type",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "csv_complete",
                        "excel_complete",
                        "pdf_created",
                        "upload_complete",
                        "vbs_complete",
                        "email_sent"
                      ]
                    }
                  },
                  {
                    "name": "recipient",
                    "schema": {
                      "type": "string",
                      "default": "faseenm@gmail.com"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Notification sent successfully"
                  }
                }
              }
            },
            "/email/gm_report": {
              "post": {
                "summary": "Send professional GM report with PDF attachment via Outlook",
                "parameters": [
                  {
                    "name": "pdf_file_path",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Path to yesterday's PDF report"
                  },
                  {
                    "name": "sender",
                    "schema": {
                      "type": "string",
                      "default": "mohamed.fasin@absons.ae"
                    }
                  },
                  {
                    "name": "recipient",
                    "schema": {
                      "type": "string",
                      "default": "ramon.logan@absons.ae"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "GM report sent successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "pdf_found": {
                              "type": "boolean"
                            },
                            "email_sent": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "BAT_File_Orchestration",
        "description": "Modular BAT file system for complete workflow orchestration with Windows Task Scheduler integration and PC lock/unlock management",
        "files": [
          "1_Email_Morning.bat",
          "2_Download_Files.bat",
          "3_VBS_Upload.bat",
          "4_VBS_Report.bat",
          "5_Complete_Workflow.bat",
          "6_Master_Scheduler.bat",
          "working_unlock.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "BAT Orchestration API",
            "version": "1.0.0"
          },
          "paths": {
            "/bat/execute_workflow": {
              "post": {
                "summary": "Execute complete automation workflow via BAT files",
                "parameters": [
                  {
                    "name": "workflow_type",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "email_morning",
                        "download_files",
                        "vbs_upload",
                        "vbs_report",
                        "complete_workflow"
                      ]
                    }
                  },
                  {
                    "name": "admin_mode",
                    "schema": {
                      "type": "boolean",
                      "default": true
                    },
                    "description": "Run with administrator privileges"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Workflow executed successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "exit_code": {
                              "type": "integer"
                            },
                            "workflow_phase": {
                              "type": "string"
                            },
                            "execution_time": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/bat/pc_management": {
              "post": {
                "summary": "PC lock/unlock management for VBS automation",
                "parameters": [
                  {
                    "name": "action",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "lock",
                        "unlock",
                        "test"
                      ]
                    }
                  },
                  {
                    "name": "password",
                    "schema": {
                      "type": "string",
                      "default": "2211fasin"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "PC management action completed"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Windows_Service_Integration",
        "description": "Windows service for 365-day autonomous operation with auto-startup and system integration",
        "files": [
          "windows_service.py",
          "service_manager.py",
          "service_monitor.py",
          "pc_restart_manager.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Windows Service API",
            "version": "1.0.0"
          },
          "paths": {
            "/service/install": {
              "post": {
                "summary": "Install MoonFlower automation as Windows service",
                "responses": {
                  "200": {
                    "description": "Service installed successfully"
                  }
                }
              }
            },
            "/service/status": {
              "get": {
                "summary": "Get service status and health check",
                "responses": {
                  "200": {
                    "description": "Service status",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "service_running": {
                              "type": "boolean"
                            },
                            "uptime": {
                              "type": "string"
                            },
                            "last_execution": {
                              "type": "string"
                            },
                            "next_scheduled": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Master_Orchestration",
        "description": "Central orchestrator coordinating all automation components with scheduling, error handling, and recovery",
        "files": [
          "master_automation_orchestrator.py",
          "orchestrator.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Master Orchestration API",
            "version": "1.0.0"
          },
          "paths": {
            "/orchestrator/execute_daily_workflow": {
              "post": {
                "summary": "Execute complete daily automation workflow",
                "responses": {
                  "200": {
                    "description": "Daily workflow executed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "workflow_status": {
                              "type": "object",
                              "properties": {
                                "csv_download": {
                                  "type": "boolean"
                                },
                                "excel_merge": {
                                  "type": "boolean"
                                },
                                "vbs_automation": {
                                  "type": "boolean"
                                },
                                "pdf_generation": {
                                  "type": "boolean"
                                },
                                "email_delivery": {
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
